// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id          String   @id @default(cuid())
  domain      String   @unique
  accessToken String
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  presets     LinesheetPreset[]

  @@map("shops")
}

model LinesheetPreset {
  id            String   @id @default(cuid())
  shopId        String
  name          String
  currency      String   // "USD", "EUR", "SEK"
  priceSource   String   // "price_list", "metafield", "variant_price"
  season        String?
  headerTitle   String?
  layoutStyle   String   @default("two-column-compact")
  products      Json     // [{productId, variantIds?, order}]
  coverImageUrl String?
  fieldToggles  Json     // {styleNumber, season, wholesale, msrp, sizes, color}
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@map("linesheet_presets")
}

// Authentication models
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  hashedPassword    String?
  role              UserRole  @default(STANDARD)
  mfaSecret         String?
  mfaEnabled        Boolean   @default(false)
  lastLoginAt       DateTime?
  lastLoginIp       String?
  isActive          Boolean   @default(true) // Admin approval status
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  accounts          Account[]
  sessions          Session[]
  auditLogs         AuditLog[]
  loginAttempts     LoginAttempt[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  event     String
  ip        String?
  userAgent String?
  details   Json?
  severity  LogSeverity @default(LOW)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
  @@index([severity])
  @@index([createdAt])
  @@map("audit_logs")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  ip        String
  userAgent String?
  success   Boolean
  reason    String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([ip])
  @@index([createdAt])
  @@map("login_attempts")
}

enum UserRole {
  ADMIN
  STANDARD
}

enum LogSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
